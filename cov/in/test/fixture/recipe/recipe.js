/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['recipe.js']) {
  _$jscoverage['recipe.js'] = [];
  _$jscoverage['recipe.js'][9] = 0;
  _$jscoverage['recipe.js'][11] = 0;
  _$jscoverage['recipe.js'][15] = 0;
  _$jscoverage['recipe.js'][17] = 0;
  _$jscoverage['recipe.js'][18] = 0;
  _$jscoverage['recipe.js'][19] = 0;
  _$jscoverage['recipe.js'][22] = 0;
  _$jscoverage['recipe.js'][29] = 0;
  _$jscoverage['recipe.js'][32] = 0;
  _$jscoverage['recipe.js'][33] = 0;
  _$jscoverage['recipe.js'][34] = 0;
  _$jscoverage['recipe.js'][37] = 0;
  _$jscoverage['recipe.js'][40] = 0;
  _$jscoverage['recipe.js'][46] = 0;
  _$jscoverage['recipe.js'][47] = 0;
  _$jscoverage['recipe.js'][48] = 0;
  _$jscoverage['recipe.js'][50] = 0;
  _$jscoverage['recipe.js'][51] = 0;
  _$jscoverage['recipe.js'][55] = 0;
  _$jscoverage['recipe.js'][58] = 0;
  _$jscoverage['recipe.js'][70] = 0;
  _$jscoverage['recipe.js'][71] = 0;
  _$jscoverage['recipe.js'][74] = 0;
  _$jscoverage['recipe.js'][75] = 0;
  _$jscoverage['recipe.js'][76] = 0;
  _$jscoverage['recipe.js'][77] = 0;
  _$jscoverage['recipe.js'][78] = 0;
  _$jscoverage['recipe.js'][79] = 0;
  _$jscoverage['recipe.js'][80] = 0;
  _$jscoverage['recipe.js'][82] = 0;
  _$jscoverage['recipe.js'][85] = 0;
  _$jscoverage['recipe.js'][86] = 0;
  _$jscoverage['recipe.js'][87] = 0;
  _$jscoverage['recipe.js'][88] = 0;
  _$jscoverage['recipe.js'][89] = 0;
  _$jscoverage['recipe.js'][90] = 0;
  _$jscoverage['recipe.js'][92] = 0;
  _$jscoverage['recipe.js'][95] = 0;
  _$jscoverage['recipe.js'][96] = 0;
  _$jscoverage['recipe.js'][97] = 0;
  _$jscoverage['recipe.js'][99] = 0;
  _$jscoverage['recipe.js'][100] = 0;
  _$jscoverage['recipe.js'][101] = 0;
  _$jscoverage['recipe.js'][102] = 0;
  _$jscoverage['recipe.js'][105] = 0;
  _$jscoverage['recipe.js'][107] = 0;
  _$jscoverage['recipe.js'][109] = 0;
  _$jscoverage['recipe.js'][114] = 0;
  _$jscoverage['recipe.js'][118] = 0;
  _$jscoverage['recipe.js'][120] = 0;
  _$jscoverage['recipe.js'][121] = 0;
  _$jscoverage['recipe.js'][122] = 0;
  _$jscoverage['recipe.js'][124] = 0;
  _$jscoverage['recipe.js'][125] = 0;
  _$jscoverage['recipe.js'][130] = 0;
  _$jscoverage['recipe.js'][131] = 0;
  _$jscoverage['recipe.js'][135] = 0;
  _$jscoverage['recipe.js'][141] = 0;
  _$jscoverage['recipe.js'][142] = 0;
  _$jscoverage['recipe.js'][143] = 0;
  _$jscoverage['recipe.js'][144] = 0;
  _$jscoverage['recipe.js'][145] = 0;
  _$jscoverage['recipe.js'][146] = 0;
  _$jscoverage['recipe.js'][152] = 0;
  _$jscoverage['recipe.js'][155] = 0;
  _$jscoverage['recipe.js'][158] = 0;
  _$jscoverage['recipe.js'][159] = 0;
  _$jscoverage['recipe.js'][160] = 0;
  _$jscoverage['recipe.js'][163] = 0;
  _$jscoverage['recipe.js'][165] = 0;
  _$jscoverage['recipe.js'][168] = 0;
  _$jscoverage['recipe.js'][169] = 0;
  _$jscoverage['recipe.js'][170] = 0;
  _$jscoverage['recipe.js'][173] = 0;
  _$jscoverage['recipe.js'][175] = 0;
  _$jscoverage['recipe.js'][180] = 0;
  _$jscoverage['recipe.js'][181] = 0;
  _$jscoverage['recipe.js'][183] = 0;
  _$jscoverage['recipe.js'][185] = 0;
  _$jscoverage['recipe.js'][186] = 0;
}
_$jscoverage['recipe.js'][9]++;
var recipe = (function (globals, head, Q) {
  _$jscoverage['recipe.js'][11]++;
  var base = "", method = "", cache = {}, hasValue = (function (value, array) {
  _$jscoverage['recipe.js'][15]++;
  var i, len;
  _$jscoverage['recipe.js'][17]++;
  for (i = 0, len = array.length; i < len; i++) {
    _$jscoverage['recipe.js'][18]++;
    if (value === array[i]) {
      _$jscoverage['recipe.js'][19]++;
      return true;
    }
}
  _$jscoverage['recipe.js'][22]++;
  return false;
}), dfd = {version: Q.defer(), dependencies: Q.defer()}, uniq = (function (array) {
  _$jscoverage['recipe.js'][29]++;
  var i, len, uniqued = [];
  _$jscoverage['recipe.js'][32]++;
  for (i = 0, len = array.length; i < len; i++) {
    _$jscoverage['recipe.js'][33]++;
    if (! hasValue(array[i], uniqued)) {
      _$jscoverage['recipe.js'][34]++;
      uniqued.push(array[i]);
    }
}
  _$jscoverage['recipe.js'][37]++;
  return uniqued;
}), define = (function (dependencies, callback) {
  _$jscoverage['recipe.js'][40]++;
  var exports = recipe.exports, variables = [], variable, i, length = dependencies.length;
  _$jscoverage['recipe.js'][46]++;
  for (i = 0; i < length; i++) {
    _$jscoverage['recipe.js'][47]++;
    if (dependencies[i] === "exports") {
      _$jscoverage['recipe.js'][48]++;
      variables.push(recipe.exports);
    }
    else {
      _$jscoverage['recipe.js'][50]++;
      variable = recipe.exports[dependencies[i]];
      _$jscoverage['recipe.js'][51]++;
      variables.push(variable);
    }
}
  _$jscoverage['recipe.js'][55]++;
  callback.apply(globals, variables);
}), recipe = (function (options) {
  _$jscoverage['recipe.js'][58]++;
  var namespace, libraries = (options || {}).libraries || [], scripts = (options || {}).scripts || [], isAmd = (options || {}).amd || false, urls = [], args = [], dfd = Q.defer(), len, deps, set, i;
  _$jscoverage['recipe.js'][70]++;
  if (isAmd) {
    _$jscoverage['recipe.js'][71]++;
    globals.define = define;
  }
  _$jscoverage['recipe.js'][74]++;
  recipe.get.version().promise.then((function (version) {
  _$jscoverage['recipe.js'][75]++;
  recipe.get.dependencies(isAmd).promise.then((function (dependencies) {
  _$jscoverage['recipe.js'][76]++;
  for (i = 0, len = libraries.length; i < len; i++) {
    _$jscoverage['recipe.js'][77]++;
    deps = dependencies[libraries[i]];
    _$jscoverage['recipe.js'][78]++;
    if (! deps) {
      _$jscoverage['recipe.js'][79]++;
      dfd.reject("Ingredients not found. namespace[" + libraries[i] + "]");
      _$jscoverage['recipe.js'][80]++;
      return dfd;
    }
    _$jscoverage['recipe.js'][82]++;
    urls = urls.concat(deps);
}
  _$jscoverage['recipe.js'][85]++;
  urls = uniq(urls.concat(scripts));
  _$jscoverage['recipe.js'][86]++;
  for (i = 0, len = urls.length; i < len; i++) {
    _$jscoverage['recipe.js'][87]++;
    set = urls[i].split("#");
    _$jscoverage['recipe.js'][88]++;
    if (! set[0]) {
      _$jscoverage['recipe.js'][89]++;
      dfd.reject("Illegal URL were exists. [\"" + urls.join("\", \"") + "\"]");
      _$jscoverage['recipe.js'][90]++;
      return dfd;
    }
    _$jscoverage['recipe.js'][92]++;
    args.push(set[0] + "?_=" + version + (set[1]? "#" + set[1]: ""));
}
  _$jscoverage['recipe.js'][95]++;
  if (args.length) {
    _$jscoverage['recipe.js'][96]++;
    args.push((function () {
  _$jscoverage['recipe.js'][97]++;
  var variables = {}, namespace;
  _$jscoverage['recipe.js'][99]++;
  if (isAmd) {
    _$jscoverage['recipe.js'][100]++;
    for (i = 0, len = libraries.length; i < len; i++) {
      _$jscoverage['recipe.js'][101]++;
      namespace = libraries[i];
      _$jscoverage['recipe.js'][102]++;
      variables[namespace] = recipe.exports[namespace];
}
  }
  _$jscoverage['recipe.js'][105]++;
  dfd.resolve(variables);
}));
    _$jscoverage['recipe.js'][107]++;
    head.js.apply(head, args);
  }
  else {
    _$jscoverage['recipe.js'][109]++;
    dfd.resolve();
  }
}));
}));
  _$jscoverage['recipe.js'][114]++;
  return dfd.promise;
}), methods = {init: (function () {
  _$jscoverage['recipe.js'][118]++;
  var menu = recipe.get.menu();
  _$jscoverage['recipe.js'][120]++;
  base = menu.replace(/\/[^\/]+$/, "");
  _$jscoverage['recipe.js'][121]++;
  if (! menu) {
    _$jscoverage['recipe.js'][122]++;
    throw "You might forget to order because of menu was not founded.";
  }
  _$jscoverage['recipe.js'][124]++;
  recipe.get.version().promise.then((function (version) {
  _$jscoverage['recipe.js'][125]++;
  recipe.resolve(menu, version);
}));
}), resolve: (function (url, version) {
  _$jscoverage['recipe.js'][130]++;
  var set = url.split("#");
  _$jscoverage['recipe.js'][131]++;
  head.js(set[0] + "?_=" + version + (set[1]? "#" + set[1]: ""));
}), get: {recipeTag: (function () {
  _$jscoverage['recipe.js'][135]++;
  var scripts = document.getElementsByTagName("script"), i, len, script, src;
  _$jscoverage['recipe.js'][141]++;
  if (scripts) {
    _$jscoverage['recipe.js'][142]++;
    for (i = 0, len = scripts.length; i < len; i++) {
      _$jscoverage['recipe.js'][143]++;
      script = scripts[i];
      _$jscoverage['recipe.js'][144]++;
      src = script.src || "";
      _$jscoverage['recipe.js'][145]++;
      if (/\/recipe\.js$/.test(src) && script.getAttribute("data-menu")) {
        _$jscoverage['recipe.js'][146]++;
        return script;
      }
}
  }
}), menu: (function () {
  _$jscoverage['recipe.js'][152]++;
  var script = recipe.get.recipeTag() || {getAttribute: (function () {
})}, menu = script.getAttribute("data-menu"), url = (script.getAttribute("src") || "").replace(/[^\/]+$/, "") + menu + ".js";
  _$jscoverage['recipe.js'][155]++;
  return menu? url: "";
}), version: (function () {
  _$jscoverage['recipe.js'][158]++;
  if (! recipe.version) {
    _$jscoverage['recipe.js'][159]++;
    head.js(base + "/recipe.version.js?_=" + new Date().getTime(), (function () {
  _$jscoverage['recipe.js'][160]++;
  dfd.version.resolve(recipe.version);
}));
  }
  else {
    _$jscoverage['recipe.js'][163]++;
    dfd.version.resolve(recipe.version);
  }
  _$jscoverage['recipe.js'][165]++;
  return dfd.version;
}), dependencies: (function (isAmd) {
  _$jscoverage['recipe.js'][168]++;
  if (! recipe.dependencies) {
    _$jscoverage['recipe.js'][169]++;
    head.js(base + "/recipe." + (isAmd? "amd.": "") + "dependencies.js?_=" + recipe.version, (function () {
  _$jscoverage['recipe.js'][170]++;
  dfd.dependencies.resolve(recipe.dependencies);
}));
  }
  else {
    _$jscoverage['recipe.js'][173]++;
    dfd.dependencies.resolve(recipe.dependencies);
  }
  _$jscoverage['recipe.js'][175]++;
  return dfd.dependencies;
})}};
  _$jscoverage['recipe.js'][180]++;
  for (method in methods) {
    _$jscoverage['recipe.js'][181]++;
    recipe[method] = methods[method];
}
  _$jscoverage['recipe.js'][183]++;
  recipe.exports = recipe.exports || {};
  _$jscoverage['recipe.js'][185]++;
  recipe.init();
  _$jscoverage['recipe.js'][186]++;
  return recipe;
})(this, head, Q);
_$jscoverage['recipe.js'].source = ["/*!"," * Recipe.js  Cook your javascript with recipe.js"," * Author     sideroad"," * License    MIT"," *"," * Version    1.0.0"," * https://github.com/sideroad/recipe/"," */","var recipe = (function(globals, head, Q){","","  var base = '',","      method = '',","      cache = {},","      hasValue = function(value, array){","        var i, len;","","        for(i = 0, len = array.length; i &lt; len; i++){","          if(value === array[i]) {","            return true;","          }","        }","        return false;","      },","      dfd = {","        version: Q.defer(),","        dependencies: Q.defer()","      },","      uniq = function(array){","        var i,","            len,","            uniqued = [];","        for(i = 0, len = array.length; i &lt; len; i++){","          if( !hasValue(array[i], uniqued) ){","           uniqued.push(array[i]);","          }","        }","        return uniqued;","      },","      define = function(dependencies, callback){","        var exports = recipe.exports,","            variables = [],","            variable,","            i,","            length = dependencies.length;","","        for(i=0;i&lt;length;i++){","          if(dependencies[i] === 'exports'){","            variables.push(recipe.exports);","          } else {","            variable = recipe.exports[dependencies[i]];","            variables.push( variable );","          }","        }","","        callback.apply( globals, variables);","      },","      recipe = function(options){","        var namespace,","            libraries = (options||{}).libraries||[],","            scripts = (options||{}).scripts||[],","            isAmd = (options||{}).amd||false,","            urls = [],","            args = [],","            dfd = Q.defer(),","            len,","            deps,","            set,","            i;","","        if(isAmd){","          globals.define = define;","        }","","        recipe.get.version().promise.then(function(version){","          recipe.get.dependencies(isAmd).promise.then(function(dependencies){","            for( i = 0, len = libraries.length; i&lt;len; i++){","              deps = dependencies[libraries[i]];","              if(!deps) {","                dfd.reject(\"Ingredients not found. namespace[\"+libraries[i]+\"]\");","                return dfd;","              }","              urls = urls.concat( deps );","            }","","            urls = uniq( urls.concat(scripts) );","            for( i = 0, len = urls.length; i&lt;len; i++){","              set = urls[i].split(\"#\");","              if(!set[0]){","                dfd.reject(\"Illegal URL were exists. [\\\"\"+urls.join(\"\\\", \\\"\")+\"\\\"]\");","                return dfd;","              }","              args.push(set[0]+\"?_=\"+version+(set[1]?\"#\"+set[1]:\"\"));","            }","","            if(args.length) {","              args.push(function(){","                var variables = {},","                    namespace;","                if(isAmd){","                  for( i =0, len = libraries.length; i&lt;len; i++){","                    namespace = libraries[i];","                    variables[namespace] = recipe.exports[namespace];","                  }","                }","                dfd.resolve(variables);","              });","              head.js.apply(head, args);","            } else {","              dfd.resolve();","            }","","          });","        });","        return dfd.promise;","      },","      methods = {","        init: function(){","          var menu = recipe.get.menu();","          ","          base = menu.replace(/\\/[^\\/]+$/, \"\");","          if(!menu) {","            throw \"You might forget to order because of menu was not founded.\";","          }","          recipe.get.version().promise.then(function(version){","            recipe.resolve(menu, version);","          });","","        },","        resolve: function(url, version){","          var set = url.split(\"#\");","          head.js(set[0]+\"?_=\"+version+(set[1]?\"#\"+set[1]:\"\"));","        },","        get: {","          recipeTag: function(){","            var scripts = document.getElementsByTagName(\"script\"),","                i,","                len,","                script,","                src;","","            if(scripts){","              for(i=0, len = scripts.length; i&lt;len; i++){","                script = scripts[i];","                src = script.src || \"\";","                if( /\\/recipe\\.js$/.test( src ) &amp;&amp; script.getAttribute('data-menu')){","                  return script;","                }","              }","            }","          },","          menu: function(){","            var script = recipe.get.recipeTag() || {getAttribute:function(){}},","                menu = script.getAttribute(\"data-menu\"),","                url = (script.getAttribute(\"src\")||\"\").replace(/[^\\/]+$/, \"\")+menu+\".js\";","            return menu ? url : \"\";","          },","          version: function(){","            if( !recipe.version ) {","              head.js(base+'/recipe.version.js?_='+(new Date().getTime()), function(){","                dfd.version.resolve(recipe.version);","              });","            } else {","              dfd.version.resolve(recipe.version);","            }","            return dfd.version;","          },","          dependencies: function(isAmd){","            if(!recipe.dependencies) {","              head.js(base+'/recipe.'+(isAmd?'amd.':'')+'dependencies.js?_='+recipe.version, function(){","                dfd.dependencies.resolve(recipe.dependencies);","              });","            } else {","              dfd.dependencies.resolve(recipe.dependencies);","            }","            return dfd.dependencies;","          }","        }","      };","","  for(method in methods){","    recipe[method] = methods[method];","  }","  recipe.exports = recipe.exports || {};","","  recipe.init();","  return recipe;","})(this, head, Q);"];
